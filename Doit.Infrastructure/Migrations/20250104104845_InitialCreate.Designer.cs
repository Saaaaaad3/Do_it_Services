// <auto-generated />
using System;
using Doit.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Doit.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250104104845_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Doit.Core.Entities.BoardEntity", b =>
                {
                    b.Property<long>("BoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BoardId"));

                    b.Property<string>("BoardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("BoardId");

                    b.HasIndex("UserId");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            BoardId = 1L,
                            BoardName = "Project Alpha",
                            CreatedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5558),
                            ModifiedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5558),
                            UserId = 1L
                        },
                        new
                        {
                            BoardId = 2L,
                            BoardName = "Project Beta",
                            CreatedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5560),
                            ModifiedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5560),
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("Doit.Core.Entities.TaskEntity", b =>
                {
                    b.Property<long>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TaskId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TaskListId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskId");

                    b.HasIndex("TaskListId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            TaskId = 1L,
                            CreatedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5597),
                            Description = "First Task",
                            Image = "",
                            ModifiedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5598),
                            Order = 1,
                            Status = "Open",
                            TaskListId = 1L,
                            Title = "Task 1"
                        },
                        new
                        {
                            TaskId = 2L,
                            CreatedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5600),
                            Description = "Second Task",
                            Image = "",
                            ModifiedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5601),
                            Order = 2,
                            Status = "Open",
                            TaskListId = 1L,
                            Title = "Task 2"
                        });
                });

            modelBuilder.Entity("Doit.Core.Entities.TaskListEntity", b =>
                {
                    b.Property<long>("TaskListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TaskListId"));

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TaskListName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskListId");

                    b.HasIndex("BoardId");

                    b.ToTable("TaskLists");

                    b.HasData(
                        new
                        {
                            TaskListId = 1L,
                            BoardId = 1L,
                            CreatedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5578),
                            ModifiedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5579),
                            Order = 1,
                            TaskListName = "To Do"
                        },
                        new
                        {
                            TaskListId = 2L,
                            BoardId = 1L,
                            CreatedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5580),
                            ModifiedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5581),
                            Order = 2,
                            TaskListName = "In Progress"
                        },
                        new
                        {
                            TaskListId = 3L,
                            BoardId = 2L,
                            CreatedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5582),
                            ModifiedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5582),
                            Order = 1,
                            TaskListName = "Completed"
                        });
                });

            modelBuilder.Entity("Doit.Core.Entities.UserEntity", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            CreatedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5404),
                            FirstName = "John",
                            LastName = "Doe",
                            ModifiedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5415),
                            Password = "1234",
                            Username = "JohnDoe"
                        },
                        new
                        {
                            UserId = 2L,
                            CreatedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5454),
                            FirstName = "Jane",
                            LastName = "Doe",
                            ModifiedDate = new DateTime(2025, 1, 4, 16, 18, 45, 260, DateTimeKind.Local).AddTicks(5454),
                            Password = "5678",
                            Username = "JaneDoe"
                        });
                });

            modelBuilder.Entity("Doit.Core.Entities.BoardEntity", b =>
                {
                    b.HasOne("Doit.Core.Entities.UserEntity", "User")
                        .WithMany("Boards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Doit.Core.Entities.TaskEntity", b =>
                {
                    b.HasOne("Doit.Core.Entities.TaskListEntity", "TaskList")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskList");
                });

            modelBuilder.Entity("Doit.Core.Entities.TaskListEntity", b =>
                {
                    b.HasOne("Doit.Core.Entities.BoardEntity", "Board")
                        .WithMany("TaskLists")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("Doit.Core.Entities.BoardEntity", b =>
                {
                    b.Navigation("TaskLists");
                });

            modelBuilder.Entity("Doit.Core.Entities.TaskListEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Doit.Core.Entities.UserEntity", b =>
                {
                    b.Navigation("Boards");
                });
#pragma warning restore 612, 618
        }
    }
}
